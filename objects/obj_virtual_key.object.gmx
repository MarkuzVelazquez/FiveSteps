<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar key_q, key_e, key_s, key_z, key_c, key_a, key_d,
pressed_q, pressed_e, pressed_s, pressed_z, pressed_c;

pressed_q = false;
pressed_e = false;
pressed_s = false;
pressed_z = false;
pressed_c = false;

press_q = false;
press_e = false;
press_s = false;
press_z = false;
press_c = false;

display_set_gui_size(view_wview, view_hview);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_virtual_key</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_q = keyboard_check_direct(ord("Q"));
key_e = keyboard_check_direct(ord("E"));
key_a = keyboard_check_direct(ord("A"));
key_d = keyboard_check_direct(ord("D"));
key_s = key_a || key_d;
key_z = keyboard_check_direct(ord("Z"));
key_c = keyboard_check_direct(ord("C"));

pressed_q = false;
if (key_q) {
    if (!press_q) {
        press_q = true;
        pressed_q = true;
    }
}
else {
    if (press_q) {
        press_q = false;
    }
}
pressed_e = false;
if (key_e) {
    if (!press_e) {
        press_e = true;
        pressed_e = true;
    }
}
else {
    if (press_e) {
        press_e = false;
    }
}
pressed_s = false;
if (key_s) {
    if (!press_s) {
        press_s = true;
        pressed_s = true;
    }
}
else {
    if (press_s) {
        press_s = false;
    }
}
pressed_z = false;
if (key_z) {
    if (!press_z) {
        press_z = true;
        pressed_z = true;
    }
}
else {
    if (press_z) {
        press_z = false;
    }
}
pressed_c = false;
if (key_c) {
    if (!press_c) {
        press_c = true;
        pressed_c = true;
    }
}
else {
    if (press_c) {
        press_c = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*virtual_key_delete(vkQ);
virtual_key_delete(vkE);
virtual_key_delete(vkS1);
virtual_key_delete(vkS2);
virtual_key_delete(vkZ);
virtual_key_delete(vkC);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(Roja, key_q, 8+156, 10, -1, 1, image_angle, image_blend, image_alpha);
draw_sprite(Roja, key_e, view_wview-8-156, 10);
draw_sprite(Centro, key_a, 148, 195);
draw_sprite(Centro, key_d, view_wview-148-156, 195);
draw_sprite_ext(Azul, key_z, 8+156, view_hview-192, -1, 1, image_angle, image_blend, image_alpha);
draw_sprite(Azul, key_c, view_wview-8-156, view_hview-192);

vkQ = virtual_key_add(8, 10, 146, 182, ord("Q"));
vkE = virtual_key_add(view_wview-8-156, 10, 146, 182, ord("E"));
vkS1 = virtual_key_add(148, 195, 146, 182, ord("A"));
vkS2 =virtual_key_add(view_wview-148-156, 195, 146, 182, ord("D"));
vkZ = virtual_key_add(8, view_hview-192, 146, 182, ord("Z"));
vkC = virtual_key_add(view_wview-8-156, view_hview-192, 146, 182, ord("C"));
/*
virtual_key_show(vkQ);
virtual_key_show(vkE);
virtual_key_show(vkS1);
virtual_key_show(vkS2);
virtual_key_show(vkZ);
virtual_key_show(vkC);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
