<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_main</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(true)
start = true;

spriteNota[0] = spr_downLeft_tap;
spriteNota[1] = spr_upLeft_tap;
spriteNota[2] = spr_center_tap;
spriteNota[3] = spr_upRight_tap;
spriteNota[4] = spr_downRight_tap;

spriteBody[0] = spr_downLeft_body;
spriteBody[1] = spr_upLeft_body;
spriteBody[2] = spr_center_body;
spriteBody[3] = spr_upRight_body;
spriteBody[4] = spr_downRight_body;

spriteBottom[0] = spr_downLeft_bottom;
spriteBottom[1] = spr_upLeft_bottom;
spriteBottom[2] = spr_center_bottom;
spriteBottom[3] = spr_upRight_bottom;
spriteBottom[4] = spr_downRight_bottom;

image_xscale = (1/52)*66;
image_yscale = image_xscale;
image_speed = 0.4;


sHeight = 768;
Separacion = (1/sHeight)*view_hview;
barra_yy = 80;
CurrentRow = -sHeight + barra_yy;
xx = (view_wview[0]/2) - 132 + 5;
yy = -CurrentRow;
yyyy = yy;

limite[4] = 0;

top_yy[4] = 0;
bottom_yy[4] = 0;

rango = 33;

for(var i = 0; i &lt; 11; i++) alarm_s[i] = -1;
alarm_s_time[11] = 0;

draw_set_color(c_white);

cargar_datos();
alarm_s[0] = (yy-barra_yy)/((3.2)*BPM);
sound = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -1;
SpeedTime = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_main</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(surf))
   {
   surf = surface_create(view_wview[0], view_hview[0]);
   surface_set_target(surf);
   scr_draw();
   surface_reset_target();
   view_surface_id [0] = surf; 
   }
   else {
   
   surface_set_target(surf);
   scr_draw();
   surface_reset_target();
   view_surface_id [0] = surf; 
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_right)) Speed++;
if (keyboard_check_pressed(vk_left)) Speed--;

if (keyboard_check(vk_backspace)) {
    game_restart();
}

if (start) {start = false; exit;}
for(var i = 4; i &gt;= 0; i--) {
    limite[i] = 0;   
}

delta = delta_time/1000000; 
VSP = 3.2*BPM*delta;


for(var i = 0; i &lt; 11; i++) {
    if (alarm_s[i] != -1) {
        alarm_s_time[i] += delta;
        _event_user(i+8, alarm_s_time[i], alarm_s[i]);
        if (alarm_s_time[i] &gt;= alarm_s[i]) {
            _event_user(i, alarm_s_time[i], alarm_s[i]);
            alarm_s[i] = -1;
            alarm_s_time[i] = 0;
        }
    }
}

//delta = room_speed/1000000*delta_time;
//delta = 1;
CurrentRow += VSP;

// CAmbio de BPM
CurrentRow = scr_cambio_bpm(CurrentRow);

// Cambio de STOP Y DELAY
if (stop_time_next != -1 &amp;&amp; !is_undefined(ds_map_STOPS) &amp;&amp; CurrentRow &gt;= stop_time_next) {
    var t = (CurrentRow - stop_time_next);
    alarm_s[2] = ds_map_find_value(ds_map_STOPS, "Value")-(t/((3.2)*BPM));
    CurrentRow = stop_time_next;
    
    ds_map_STOPS = ds_list_find_value(STOPS, ds_list_find_index(STOPS, ds_map_STOPS)+1);
    if (!is_undefined(ds_map_STOPS)) bpm_time_next = ds_map_find_value(ds_map_STOPS, "Time");
}
if (delay_time_next != -1 &amp;&amp; !is_undefined(ds_map_DELAYS) &amp;&amp; CurrentRow &gt;= delay_time_next) {
    var t = (CurrentRow - delay_time_next);
    alarm_s[2] = ds_map_find_value(ds_map_DELAYS, "Value")-(t/((3.2)*BPM));
    CurrentRow = delay_time_next;
    
    ds_map_DELAYS = ds_list_find_value(DELAYS, ds_list_find_index(DELAYS, ds_map_DELAYS)+1);
    if (!is_undefined(ds_map_DELAYS)) delay_time_next = ds_map_find_value(ds_map_DELAYS, "Time");
}

// Cambio de speed
if (speed_time_next != -1 &amp;&amp; !is_undefined(ds_map_SPEED) &amp;&amp; CurrentRow &gt;= speed_time_next) {
    // Corregir currentrow para no perder la sincronizacion
    var t = (CurrentRow - speed_time_next);
    Speed1 = Speed;
    //show_debug_message("S1 "+string(Speed1));
    Speed2 = ds_map_find_value(ds_map_SPEED, "Value");
    //show_debug_message("S2 "+string(Speed2));
    CurrentRow = speed_time_next+t;
    alarm_s[4] = ds_map_find_value(ds_map_SPEED, "Time2");
    //show_debug_message("alarm "+string(alarm_s[4]));
    
    ds_map_SPEED = ds_list_find_value(SPEED, ds_list_find_index(SPEED, ds_map_SPEED)+1);
    if (!is_undefined(ds_map_SPEED)) speed_time_next = ds_map_find_value(ds_map_SPEED, "Time");
}


scr_jugador();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
ds_map_destroy(archivo);
background_delete(background);
audio_destroy_stream(music);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_main</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_text(32, 16,  "CurrentRow: "+string_format(CurrentRow, 9, 9));
draw_text(32, 32, "CurrentSecond: "+string_format(audio_sound_get_track_position(sound), 9, 9));
draw_text(32, 48, "BPM: "+string_format(BPM, 4, 4));
draw_text(32, 64, "Speed: "+string_format(Speed, 4, 4));
/*for(var i = 0; i &lt; 5; i++) {
    draw_text(32, 16+(i*16), top_yy[i]);
}*/
draw_text(32, 80, room_speed);//count);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists (surf) 
   { 
   draw_surface_stretched (surf, 0, 0, display_get_gui_width (), display_get_gui_height ()); 
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
